apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'  //kapt3插件
apply plugin: 'realm-android'//realm插件


// 得到当前时间的字符串 用于发包的时候拼接命名
// 关于语言的实现参考 groovy def定义无类型的变量 返回值无类型的方法
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId "com.vension.mvp"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true // dex突破65535的限制
        vectorDrawables.useSupportLibrary = true
    }


    // 签名配置
    signingConfigs {
        debug {
            // 部分第三方SDK要绑定签名, 故使用 release 的签名, 方便测试
            // 使用 try catch 是防止 Travis CI 打包失败
            try {
                Properties props = new Properties()
                props.load(new FileInputStream(file("/sign/sign.properties")))
                keyAlias props['KEY_ALIAS']
                keyPassword props['KEY_PASSWORD']
                storeFile file(props['KEYSTORE_FILE'])
                storePassword props['STORE_PASSWORD']
            } catch (Exception e) {
            }
        }
        release {
//            Properties props = new Properties()
//            props.load(new FileInputStream(file("/sign/sign.properties")))
            // 变量在 Travis CI 后台设置好
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
            storeFile file("../KeyStore.jks")
            storePassword System.getenv("STORE_PASSWORD")
        }
    }

    buildTypes {
        release {
            debuggable false //设为true
            minifyEnabled true  //是否混淆代码 设为false即可断点调试
            shrinkResources true  //自动移除无用的Resource文件
            zipAlignEnabled true// 包优化
            // 指定混淆文件 前面是默认的 后面是需要自己配置的混淆文件在关联第三方的文件 需要配置的混淆内容
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        // 输出apk名称为Toutiao_release_v0.1_2017-02-26.apk
                        def fileName = "KV-MVP-Frame_v${variant.versionName}_${releaseTime()}.apk"
                        outputFileName = fileName
                    }
                }
            }
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    //支持lambda表达式
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation 'com.jakewharton:butterknife:8.8.1'
    kapt 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'zlc.season:rxdownload2:1.1.1'
    // viewpager 工具类 --》 https://github.com/LillteZheng/ViewPagerHelper
    implementation 'com.github.LillteZheng:ViewPagerHelper:v0.5'
    implementation project(':v-frame')
}
